--------------------------------------------------
CONCEITOS BÁSICOS
--------------------------------------------------

1. STRUCT (Estrutura)
---------------------------------
- Agrupa variáveis sob um único nome (dados heterogêneos).
- Sintaxe:
  struct Nome {
      tipo1 campo1;
      tipo2 campo2;
      // ...
  };

Exemplo com laço:
#include <stdio.h>

struct Aluno {
    char nome[50];
    float nota;
};

int main() {
    struct Aluno turma[3];
    
    // Entrada de dados
    for(int i = 0; i < 3; i++) {
        printf("Aluno %d:\n", i+1);
        printf("Nome: ");
        scanf("%s", turma[i].nome);
        printf("Nota: ");
        scanf("%f", &turma[i].nota);
    }

    // Saída de dados
    printf("\nAprovados:\n");
    for(int i = 0; i < 3; i++) {
        if(turma[i].nota >= 6.0) {
            printf("%s: %.1f\n", turma[i].nome, turma[i].nota);
        }
    }
    return 0;
}

--------------------------------------------------

2. PONTEIRO
---------------------------------
- Armazena endereços de memória.
- Operadores:
  & : endereço de uma variável
  * : desreferencia (acessa o valor no endereço)

Exemplo com laço:
#include <stdio.h>

int main() {
    int vetor[5] = {10, 20, 30, 40, 50};
    int *ptr = vetor; // ptr aponta para o início do vetor
    
    // Acesso via ponteiro
    printf("Valores do vetor:\n");
    for(int i = 0; i < 5; i++) {
        printf("%d ", *(ptr + i)); 
    }
    
    // Modificando valores
    printf("\nDobro:\n");
    for(int i = 0; i < 5; i++) {
        *(ptr + i) *= 2;
        printf("%d ", vetor[i]);
    }
    return 0;
}

--------------------------------------------------

3. VETOR (Array Unidimensional)
---------------------------------
- Coleção de elementos do mesmo tipo.
- Índice inicia em 0.

Exemplo com laço:
#include <stdio.h>

int main() {
    float notas[5];
    float soma = 0;
    
    // Entrada
    printf("Digite 5 notas:\n");
    for(int i = 0; i < 5; i++) {
        scanf("%f", &notas[i]);
        soma += notas[i];
    }
    
    // Saída
    printf("\nNotas acima da média (%.1f):\n", soma/5);
    for(int i = 0; i < 5; i++) {
        if(notas[i] > soma/5) {
            printf("Nota %d: %.1f\n", i+1, notas[i]);
        }
    }
    return 0;
}

--------------------------------------------------

4. MATRIZ (Array Bidimensional)
---------------------------------
- Vetor de vetores (linhas x colunas).

Exemplo com laços aninhados:
#include <stdio.h>

#define LINHAS 2
#define COLUNAS 3

int main() {
    int matriz[LINHAS][COLUNAS];
    
    // Preenchimento
    printf("Digite %d valores:\n", LINHAS*COLUNAS);
    for(int i = 0; i < LINHAS; i++) {
        for(int j = 0; j < COLUNAS; j++) {
            scanf("%d", &matriz[i][j]);
        }
    }
    
    // Exibição
    printf("\nMatriz transposta:\n");
    for(int j = 0; j < COLUNAS; j++) {
        for(int i = 0; i < LINHAS; i++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }
    return 0;
}

--------------------------------------------------
COMBINAÇÕES IMPORTANTES:
--------------------------------------------------

* Ponteiro para Struct:
struct Pessoa *ptr = &var;
printf("Nome: %s\n", ptr->nome); // Usa ->

* Vetor de Structs:
struct Pessoa grupo[10];
grupo[0].idade = 20;

* Matriz Dinâmica (usando ponteiros duplos):
int **matriz = (int**)malloc(linhas * sizeof(int*));
for(int i = 0; i < linhas; i++) 
    matriz[i] = (int*)malloc(colunas * sizeof(int));
```

### Dicas de Estudo:
1. Compile e execute os exemplos
2. Modifique parâmetros (tamanhos de vetores, condições)
3. Pratique combinações (ex: matriz de structs com ponteiros)
4. Foque na sintaxe de:
   - Acesso a membros de struct: `.` vs `->`
   - Aritmética de ponteiros
   - Aninhamento de laços para matrizes
